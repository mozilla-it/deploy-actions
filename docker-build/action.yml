name: docker-build
description: Build a Mozcloud service image
inputs:
  image_name:
    description: Name to give to the built image
    required: true
  gar_location:
    description: GCP region where GAR is located
    required: false
    default: us
  gar_name:
    description: GAR Name
    required: true
  project_id:
    description: GCP project id
    required: true
  docker_build_args:
    default: ''
    description: Optional list of build-time variables https://docs.docker.com/engine/reference/commandline/buildx_build/#build-arg
    required: false
  image_build_context:
    description: Path to image context for `docker build`
    required: false
    default: ./
  dockerfile_path:
    description: Path to Dockerfile
    required: false
    default: ./Dockerfile
  image_tag_metadata:
    description: Optional metadata to append to image tag (e.g. for a tagged commit `v1.2.3` and metadata `dev`, the final image tag will be `v1.2.3--dev`)
    required: false
  should_tag_ghcr:
    description: Whether to tag images to be pushed to ghcr.io.
    required: false
    default: "false"
  should_tag_latest:
    description: Whether to tag images as `latest`.
    required: false
    default: "false"

outputs:
  image_tags:
    description: "Generated Docker image tags"
    value: ${{ steps.meta.outputs.tags }}

runs:
  using: composite
  steps:
    - uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 #v3.10.0
    - name: Generate MozCloud Tag
      id: mozcloud-tag
      shell: bash
      env:
        REF_TYPE: ${{ github.ref_type }}
        REF_NAME: ${{ github.ref_name }}
        IMAGE_TAG_METADATA: ${{ inputs.image_tag_metadata }}
      run: |
        if [[ "${REF_TYPE}" == "tag" ]]; then
          tag="${REF_NAME}"
        else
          tag="$(git rev-parse --short=10 HEAD)"
        fi
        # append metadata if present
        if [[ -n "${IMAGE_TAG_METADATA}" ]]; then
          tag="${tag}--${IMAGE_TAG_METADATA}"
        fi
        echo "Setting IMAGE_TAG=${tag} as output"
        echo "image_tag=${tag}" >> "$GITHUB_OUTPUT"

    - name: Set image list
      shell: bash
      id: set-images
      env:
        GAR_LOCATION: ${{ inputs.gar_location }}
        PROJECT_ID: ${{ inputs.project_id }}
        GAR_NAME: ${{ inputs.gar_name }}
        IMAGE_NAME: ${{ inputs.image_name }}
        SHOULD_TAG_GHCR: ${{ inputs.should_tag_ghcr }}
      run: |
        images=( "${GAR_LOCATION}-docker.pkg.dev/${PROJECT_ID}/${GAR_NAME}/${IMAGE_NAME}" )
        if [[ "${SHOULD_TAG_GHCR}" == "true" ]]; then
          images+=( "ghcr.io/${{ github.repository }}/${IMAGE_NAME}" )
        fi

        # Debug output
        echo "Generated Images:"
        printf '%s\n' "${images[@]}"

        {
          echo "images<<EOF"
          printf '%s\n' "${images[@]}"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Set tag list
      shell: bash
      id: set-tags
      env:
        SHOULD_TAG_LATEST: ${{ inputs.should_tag_latest }}
        IMAGE_TAG: ${{ steps.mozcloud-tag.outputs.image_tag }}
      run: |
        tags=( "type=raw,value=${IMAGE_TAG}" )
        if [[ "${SHOULD_TAG_LATEST}" == "true" ]]; then
          tags+=( "type=raw,value=latest" )
        fi

        # Debug output
        echo "Generated Tags:"
        printf '%s\n' "${tags[@]}"

        {
          echo "tags<<EOF"
          printf '%s\n' "${tags[@]}"
          echo "EOF"
        } >> "$GITHUB_OUTPUT"

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 #v5.7.0
      with:
        images: ${{ steps.set-images.outputs.images }}
        tags: ${{ steps.set-tags.outputs.tags }}
    # https://docs.docker.com/build/ci/github-actions/checks/#run-checks-with-dockerbuild-push-action
    - name: Check image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #v6.18.0
      with:
        check: true
        # We can't use the intermediate env var trick to appease zizmor in this
        # case. We'll have to rely on docker/build-push-action to handle
        # santizing this input
        context: ${{ inputs.image_build_context }} # zizmor: ignore[template-injection]
        build-args: ${{ inputs.docker_build_args }}
        file: ${{ inputs.dockerfile_path }}
    - name: Build image
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 #v6.18.0
      with:
        # We can't use the intermediate env var trick to appease zizmor in this
        # case. We'll have to rely on docker/build-push-action to handle
        # santizing this input
        context: ${{ inputs.image_build_context }} # zizmor: ignore[template-injection]
        build-args: ${{ inputs.docker_build_args }}
        file: ${{ inputs.dockerfile_path }}
        # in addition to tags generated by docker-metadata, add the plain
        # `${{ inputs.image_name }}` so that it can be referred to by that
        # more familiar name in scripts
        tags: |
          ${{ inputs.image_name }}
          ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        annotations: ${{ steps.meta.outputs.annotations }}
        load: true
        push: false
        cache-from: type=gha
        cache-to: type=gha,mode=max
