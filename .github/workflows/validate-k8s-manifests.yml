# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.

# Reusable workflow to render helm charts and validate their manifests using kubeconform
# A comment is made on the pull request containing the output

name: render helm charts and validate k8s manifests
on:
  workflow_call:

env:
  HEAD_REF: ${{ github.head_ref }}
  KUBECONFORM_VERSION: "0.6.7"
  KUBECONFORM_SHA256: "95f14e87aa28c09d5941f11bd024c1d02fdc0303ccaa23f61cef67bc92619d73"
  KUBECONFORM_BASE_URL: "https://github.com/yannh/kubeconform/releases/download"
  KUBECONFORM_SCHEMA_LOCATION: "https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json"

jobs:
  get_changed_helm_charts:
    runs-on: ubuntu-latest
    outputs:
      matrix_charts: ${{ steps.find_changed_charts.outputs.matrix_changed_charts }}
      charts: ${{ steps.find_changed_charts.outputs.changed_charts }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
         fetch-depth: '100'

      - name: find changed helm charts
        id: find_changed_charts
        run: |
          git fetch origin ${{ github.base_ref }}:${{ github.base_ref }}
          echo matrix_changed_charts=$(git diff --name-only ${{ github.base_ref }}...HEAD -- '**/k8s/**/*.yaml' '**/k8s/**/*.yml' '**/k8s/**/*.tpl' '**/k8s/**/*.tmpl' | cut -d'/' -f1,2,3 | uniq | jq -R 'split("\n")' | jq -s 'flatten(1)') >> $GITHUB_OUTPUT
          echo changed_charts=$(git diff --name-only ${{ github.base_ref }}...HEAD -- '**/k8s/**/*.yaml' '**/k8s/**/*.yml' '**/k8s/**/*.tpl' '**/k8s/**/*.tmpl' | cut -d'/' -f1,2,3 | uniq) >> $GITHUB_OUTPUT

  render_head_ref_charts:
    runs-on: ubuntu-latest
    needs: get_changed_helm_charts
    strategy:
      matrix:
        chart: ${{ fromJSON(needs.get_changed_helm_charts.outputs.matrix_charts) }}
    steps:
      - name: checkout repository
        uses: actions/checkout@v4

      - name: setup helm
        uses: azure/setup-helm@v4.0.0

      - name: render ${{ matrix.chart }} from head ref
        id: render_head
        run: |
          mkdir -p shared/head-charts
          git fetch origin "$HEAD_REF"
          git checkout  "$HEAD_REF" --
          if [ -f "${{ matrix.chart }}/Chart.yaml" ]; then
            helm dependency update "${{ matrix.chart }}"
            values_files="${{ matrix.chart }}"/values-*
            for values_file in $(basename -a $values_files); do
              env_name=$(basename "$values_file" | sed -E 's/^values-(.+)\.ya?ml$/\1/')
              helm template "${{ matrix.chart }}" -f "${{ matrix.chart }}/values.yaml" -f "${{ matrix.chart }}/${values_file}" --output-dir "shared/charts/${{ matrix.chart }}/${env_name}"
            done
          fi
          echo sanitized_name=$(echo "${{ matrix.chart }}" | sed 's/\//-/g') >> $GITHUB_OUTPUT
      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: "shared-head-${{ steps.render_head.outputs.sanitized_name }}"
          path: "shared"

  validate_rendered_helm_chart_manifests:
    runs-on: ubuntu-latest
    needs:
      - get_changed_helm_charts
      - render_head_ref_charts
    steps:
      - name: install kubeconform
        run: |
          set -euo pipefail

          FILENAME="kubeconform-linux-amd64.tar.gz"
          DOWNLOAD_URL="${KUBECONFORM_BASE_URL}/v${KUBECONFORM_VERSION}/${FILENAME}"

          echo "Downloading kubeconform from ${DOWNLOAD_URL}..."
          wget -q "$DOWNLOAD_URL" -O "$FILENAME"

          echo "${KUBECONFORM_SHA256}  $FILENAME" | sha256sum -c -

          echo "Extracting kubeconform..."
          tar -xzf "$FILENAME"
          chmod +x kubeconform
          sudo mv kubeconform /usr/local/bin/kubeconform

      - name: download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: shared-*
          merge-multiple: true
          path: "shared"

      - name: validate k8s manifests
        id: validate_k8s_manifests
        run: |
          set -eo pipefail

          charts="${{ needs.get_changed_helm_charts.outputs.charts }}"
          exit_code=0

          for chart in $charts; do
            echo "Validating ${chart}..."
            if [ -d "shared/charts/${chart}" ]; then
              if ! /usr/local/bin/kubeconform \
                  -schema-location default \
                  -schema-location "${KUBECONFORM_SCHEMA_LOCATION}" \
                  -summary "shared/charts/${chart}" >> kubeconform.log 2>&1; then
                exit_code=1
              fi

              # Remove chart base dir and default release name
              sed -i \
                -e "s|shared/charts/${chart}/||g" \
                -e "s/release-name-//g" \
                kubeconform.log
            else
              echo "Warning: Rendered output for ${chart} not found." >> kubeconform.log
            fi
          done

          echo "kubeconform_exit_code=$exit_code" >> $GITHUB_OUTPUT

      - name: post kubeconform validation summary as comment on pull request
        if: needs.get_changed_helm_charts.outputs.charts != ''
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const comment_char_limit = 65536; // GitHub comment character limit
            const kubeconform_file = 'kubeconform.log';

            if (fs.existsSync(kubeconform_file)) {
              var summary = fs.readFileSync(kubeconform_file, 'utf8');
            } else {
              console.log(kubeconform_file + " not found")
              return
            }

            function splitComment(comment, maxSize, sepEnd, sepStart, comStart) {
              // Adapted from Atlantis SplitComment function
              // https://github.com/runatlantis/atlantis/blob/main/server/events/vcs/common/common.go#L18
              if (comment.length <= (comment_char_limit - comStart.length)) {
                return [comStart + summary]
              }
              maxWithSep = comment_char_limit - sepEnd.length - sepStart.length;
              var comments = [];
              var numComments = Math.ceil(comment.length / maxWithSep);
              for (var i = 0; i < numComments; i++) {
                var upTo = Math.min(comment.length, (i + 1) * maxWithSep);
                var portion = comment.slice(i * maxWithSep, upTo);
                if (i < numComments - 1) {
                  portion += sepEnd;
                }
                if (i > 0) {
                  portion = sepStart + portion
                } else {
                  portion = comStart + portion
                }
                comments.push(portion);
              }
              return comments;
            }

            var sepEnd = "\n```\n</details>" + "\n<br>\n\n**Warning**: Output length greater than max comment size. Continued in next comment.";
            var sepStart = "Continued from previous comment.\n<details><summary>Show Output</summary>\n\n" + "```summary\n";
            var comStart = "Validated rendered Kubernetes manifests.\n<details><summary>Show Output</summary>\n\n" + "```summary\n";

            comments = splitComment(summary, comment_char_limit, sepEnd, sepStart, comStart);

            for (const comment of comments) {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              })
            }

      - name: fail workflow if kubeconform validation fails
#        if: steps.validate_k8s_manifests.outputs.kubeconform_exit_code != '0'
        run: |
          echo "Kubeconform failed with exit code ${{ steps.validate_k8s_manifests.outputs.kubeconform_exit_code }}"
          exit 0
